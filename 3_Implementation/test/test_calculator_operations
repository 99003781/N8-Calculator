#include "unity.h"
#include "calculator_operations.h"

#include "calculator_operations.h"
#define PROJECT_NAME    "Calculator"

/* Prototypes for all the test functions */
void test_add(void);
void test_add_testcase2(void);
void test_add_testcase3(void);
void test_add_testcase4(void);
void test_add_testcase5(void);

void test_subtract(void);
void test_subtract_testcase2(void);
void test_subtract_testcase3(void);
void test_subtract_testcase4(void);
void test_subtract_testcase5(void);

void test_multiply(void);
void test_multiply_testcase2(void);
void test_multiply_testcase3(void);
void test_multiply_testcase4(void);
void test_multiply_testcase5(void);

void test_divide(void);
void test_divide_testcase2(void);
void test_divide_testcase3(void);
void test_divide_testcase4(void);
void test_divide_testcase5(void);

void test_percentage(void);
void test_percentage_testcase2(void);
void test_percentage_testcase3(void);
void test_percentage_testcase4(void);
void test_percentage_testcase5(void);

void test_gcd(void);
void test_gcd_testcase2(void);
void test_gcd_testcase3(void);
void test_gcd_testcase4(void);
void test_gcd_testcase5(void);

void test_rem(void);
void test_rem_testcase2(void);
void test_rem_testcase3(void);
void test_rem_testcase4(void);
void test_rem_testcase5(void);

void test_power(void);
void test_power_testcase2(void);
void test_power_testcase3(void);
void test_power_testcase4(void);
void test_power_testcase5(void);

/* Required by the unity test framework */
void setUp(){}
/* Required by the unity test framework */
void tearDown(){}

/* Start of the application test */
int main()
{
  /* Initiate the Unity Test Framework */
  UNITY_BEGIN();

  /* Run Test functions */
  /*ADDITION*/
  RUN_TEST(test_add);
  RUN_TEST(test_add_testcase2);
  RUN_TEST(test_add_testcase3);
  RUN_TEST(test_add_testcase4); 
  RUN_TEST(test_add_testcase5);

  /*SUBTRACTION*/
  RUN_TEST(test_subtract);
  RUN_TEST(test_subtract_testcase2);
  RUN_TEST(test_subtract_testcase3);
  RUN_TEST(test_subtract_testcase4);
  RUN_TEST(test_subtract_testcase5);

  /*MULTIPLICATION*/
  RUN_TEST(test_multiply);
  RUN_TEST(test_multiply_testcase2);
  RUN_TEST(test_multiply_testcase3);
  RUN_TEST(test_multiply_testcase4);
  RUN_TEST(test_multiply_testcase5);

  /*DIVISION*/
  RUN_TEST(test_divide);
  RUN_TEST(test_divide_testcase2);
  RUN_TEST(test_divide_testcase3);
  RUN_TEST(test_divide_testcase4);
  RUN_TEST(test_divide_testcase5);

  /*PERCENTAGE*/
  RUN_TEST(test_percentage);
  RUN_TEST(test_percentage_testcase2);
  RUN_TEST(test_percentage_testcase3);
  RUN_TEST(test_percentage_testcase4);
  RUN_TEST(test_percentage_testcase5);

  /*GCD*/
  RUN_TEST(test_gcd);
  RUN_TEST(test_gcd_testcase2);
  RUN_TEST(test_gcd_testcase3);
  RUN_TEST(test_gcd_testcase4);
  RUN_TEST(test_gcd_testcase5);

  /*REMAINDER*/
  RUN_TEST(test_rem);
  RUN_TEST(test_rem_testcase2);
  RUN_TEST(test_rem_testcase3);
  RUN_TEST(test_rem_testcase4);
  RUN_TEST(test_rem_testcase5);

  /*POWER*/
  RUN_TEST(test_power);
  RUN_TEST(test_power_testcase2);
  RUN_TEST(test_power_testcase3);
  RUN_TEST(test_power_testcase4);
  RUN_TEST(test_power_testcase5);


  /* Close the Unity Test Framework */
  return UNITY_END();
}

/* All the test functions */ 
/*ADDITION*/
void test_add(void)
{
  TEST_ASSERT_EQUAL(30, add(10, 20));
}

void test_add_testcase2(void)
{
  TEST_ASSERT_EQUAL(-10, add(10, -20));
}

void test_add_testcase3(void)
{
  TEST_ASSERT_EQUAL(-20.5, add(-40.5, 20.0));
}

void test_add_testcase4(void)
{
  TEST_ASSERT_EQUAL(41.0, add(15.5, 25.5));
}
void test_add_testcase5(void)
{
  TEST_ASSERT_EQUAL(15000, add(7500, 7500));
}

/*SUBTRACTION*/
void test_subtract(void) 
{
  TEST_ASSERT_EQUAL(-3, subtract(0, 3));
}

void test_subtract_testcase2(void)
{
  TEST_ASSERT_EQUAL(2, subtract(5, 3));
}

void test_subtract_testcase3(void)
{
  TEST_ASSERT_EQUAL(7, subtract(10, 3));
}

void test_subtract_testcase4(void)
{
  TEST_ASSERT_EQUAL(-4, subtract(3, 7));
}

void test_subtract_testcase5(void)
{
  TEST_ASSERT_EQUAL(100, subtract(1000, 900));
}

/*MULTIPLICATION*/
void test_multiply(void) 
{
  TEST_ASSERT_EQUAL(0, multiply(1, 0));
}

void test_multiply_testcase2(void)
{
  TEST_ASSERT_EQUAL(15, multiply(5, 3));
}

void test_multiply_testcase3(void)
{
  TEST_ASSERT_EQUAL(0, multiply(10, 0));
}

void test_multiply_testcase4(void)
{
  TEST_ASSERT_EQUAL(-30, multiply(6, -5));
}
void test_multiply_testcase5(void)
{
  TEST_ASSERT_EQUAL(10, multiply(2, 5));
}

/*DIVISION*/
void test_divide(void) 
{
  TEST_ASSERT_EQUAL(0, divide(1, 0));
}
void test_divide_testcase2(void)
{
  TEST_ASSERT_EQUAL(5, divide(10, 2));
}

void test_divide_testcase3(void)
{
  TEST_ASSERT_EQUAL(5, divide(5, 1));
}
void test_divide_testcase4(void)
{
  TEST_ASSERT_EQUAL(-6, divide(-30, 5));
}
void test_divide_testcase5(void)
{
  TEST_ASSERT_EQUAL(1, divide(2, 2));
}

/*PERCENTAGE*/
void test_percentage(void) 
{
  TEST_ASSERT_EQUAL(0, percentage(1, 0));
}

void test_percentage_testcase2(void)
{
  TEST_ASSERT_EQUAL (40, percentage(2,5));
}

void test_percentage_testcase3(void)
{
  TEST_ASSERT_EQUAL (62.5, percentage(50,80));
}

void test_percentage_testcase4(void)
{
  TEST_ASSERT_EQUAL (50, percentage(100,200));
}

void test_percentage_testcase5(void)
{
  TEST_ASSERT_EQUAL(40, percentage(2, 5));
}

/*GCD*/
void test_gcd(void) 
{
  TEST_ASSERT_EQUAL(1, gcd(1, 2));
}

void test_gcd_testcase2(void)
{
  TEST_ASSERT_EQUAL (20, gcd(20, 40));
}

void test_gcd_testcase3(void)
{
  TEST_ASSERT_EQUAL (1, gcd(35, 64));
}

void test_gcd_testcase4(void)
{
  TEST_ASSERT_EQUAL (12, gcd(24, 36));
}

void test_gcd_testcase5(void)
{
  TEST_ASSERT_EQUAL(1, gcd(2, 5));
}

/*REMAINDER*/
void test_rem(void) 
{
  TEST_ASSERT_EQUAL(1, rem(1, 2));
}

void test_rem_testcase2(void)
{
  TEST_ASSERT_EQUAL (0, rem(45,5));
}

void test_rem_testcase3(void)
{
  TEST_ASSERT_EQUAL (2, rem(17,5));
}

void test_rem_testcase4(void)
{
  TEST_ASSERT_EQUAL (2, rem(18,4));
}

void test_rem_testcase5(void)
{
  TEST_ASSERT_EQUAL(1, rem(5, 4));
}

/*POWER*/
void test_power(void) 
{
  TEST_ASSERT_EQUAL (1, power(1, 2));
}

void test_power_testcase2(void)
{
  TEST_ASSERT_EQUAL (27, power(3,3));
}

void test_power_testcase3(void)
{
  TEST_ASSERT_EQUAL (1, power(3,0));
}

void test_power_testcase4(void)
{
  TEST_ASSERT_EQUAL (1, power(1,4));
}
void test_power_testcase5(void)
{
  TEST_ASSERT_EQUAL(25, power(5, 2));
}


